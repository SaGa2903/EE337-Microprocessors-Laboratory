ORG 0H
LJMP MAIN
ORG 100H
MAIN:
CALL SEARCH
HERE: SJMP HERE
ORG 130H
SEARCH:

CLR 30H
CLR 31H
CLR 32H
CLR 33H
MOV 30H, #90H //ARRAY ADDRESS
MOV 31H, #1 //N
MOV 32H, #7 //S
MOV 33H, #0EH //Default set to be #address not found

//----------------------------------------------------
//INITIALISATION
 //ARRAY - ARR[L TO M TO R]
MOV R2, 30H //FIRST ELEMENT L
MOV A, 31H //N
JZ HERE //IF N==0, THE PROGRAM MUST END
ADD A, R2
MOV R4,A 
DEC R4//LAST ELEMENT R

MOV A, R4//MOVE R TO A 
CLR C
SUBB A, R2
MOV B, #2H
DIV AB // A STORES N/2 NOW, B STORES THE REMAINDER
ADD A, 30H
MOV R1, A//R1 STORES THE ADDRESS OF MIDDLE ELEMENT M 
//----------------------------------------------------

COMPARE: 
MOV A, @R1
CJNE A,32H, NOTEQUAL //32H==S, IF M<S, C=1...ELSE C=0
MOV 33H, R1 //IF EQUAL, R3 I.E MIDDLE ELEMENT == S
SJMP HERE //STOP HERE

NOTEQUAL:
JC GREATER //IF 2ND HALF OF ARRAY, JUMP (C=1)
//IF FIRST HALF OF ARRAY, CONTINUE HERE
MOV R4, 1H //MOV R4, R1
DEC R4 //MAKES M-1 AS THE LAST ELEMENT //FIRST ELEMENT REMAINS THE SAME
MOV A, R1
CJNE A, 2H, MIDDLE
SJMP HERE


GREATER:
MOV R2, 1H //MOV R2, R1
INC R2 //MAKE M+1 AS THE FIRST ELEMENT
MOV A, R1
CJNE A, 4H, MIDDLE
SJMP HERE


MIDDLE:
//FIRST ELEMENT - R2
//LAST ELEMENT - R4
//MIDDLE - R2 + (R4-R2)/2 -> R1

MOV A, R4
CLR C
SUBB A, R2
MOV B, #2H
DIV AB
ADD A, R2
MOV R1, A
SJMP COMPARE
//--------MIDDLE-----
 
RET
END